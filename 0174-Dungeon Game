# The demons had captured the princess (P) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N
# rooms laid out in a 2D grid. Our valiant knight (K) was initially positioned in the top-left room and must fight his way through the
# dungeon to rescue the princess.

# The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he
# dies immediately.

# Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are
# either empty (0's) or contain magic orbs that increase the knight's health (positive integers).

# In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.

# Write a function to determine the knight's minimum initial health so that he is able to rescue the princess.

# For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT->
# RIGHT -> DOWN -> DOWN.
# -2 (K) -3	3
# -5	-10	1
# 10	30	-5 (P)
 
# Note:

# The knight's health has no upper bound.
# Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is
# imprisoned.

# The idea is to perform a bottom-up dynamic programming (DP) searching for the minimum health point.
# The reason to do a bottom-up search instead of a top-down one is that the visited cells in the top-down search might need to be
# revisited due to insufficient health points, while visited cells in the bottom-up search are guaranteed to be valid for the rest of
# the search.
# In each step of DP, the least health points needed for the adjacent right and down cell are compared to the penalty or bonus in the
# current cell, the just-enough health points are then saved as the DP health points for the current cell.
# Then the final DP health points for the very first cell is the final solution.
# Time Complexity: O(MN)
# Space Comlexity: O(MN). It can be further optimized to be O(min(M, N)), but not implemented here.

class Solution:
	def calculateMinimumHP(self, dungeon: 'List[List[int]]') -> 'int':
        if not dungeon:
	    return 1
        m, n = len(dungeon), len(dungeon[0])
        dp = [[1] * n for i in range(m)]
        dp[-1][-1] = max(1, 1 - dungeon[-1][-1]) # Compute the health points for the last cell.
        for i in range(m - 2, -1, -1): # Compute the health points for the last column.
            dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])
        for i in range(n - 2, -1, -1): # Compute the health points for the last row.
            dp[-1][i] = max(1, dp[-1][i + 1] - dungeon[-1][i])
        for i in range(m - 2, -1, -1):
            for j in range(n - 2, -1, -1): # Compute the health points for the rest cells.
                dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1)
		# Minimum health points needed to cover the penalty (no penalty case corresponds to 1 in the formula) in the current
		# cell and also meet the need for either the down or right cell. 
        return dp[0][0]
