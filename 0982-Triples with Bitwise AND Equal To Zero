# LeetCode 982: Triples with Bitwise AND Equal To Zero

# Given an array of integers A, find the number of triples of indices (i, j, k) such that:
# 0 <= i < A.length
# 0 <= j < A.length
# 0 <= k < A.length
# A[i] & A[j] & A[k] == 0, where & represents the bitwise-AND operator.

# Example 1:
# Input: [2,1,3]
# Output: 12

# Explanation: We could choose the following i, j, k triples:
# (i=0, j=0, k=1) : 2 & 2 & 1
# (i=0, j=1, k=0) : 2 & 1 & 2
# (i=0, j=1, k=1) : 2 & 1 & 1
# (i=0, j=1, k=2) : 2 & 1 & 3
# (i=0, j=2, k=1) : 2 & 3 & 1
# (i=1, j=0, k=0) : 1 & 2 & 2
# (i=1, j=0, k=1) : 1 & 2 & 1
# (i=1, j=0, k=2) : 1 & 2 & 3
# (i=1, j=1, k=0) : 1 & 1 & 2
# (i=1, j=2, k=0) : 1 & 3 & 2
# (i=2, j=0, k=1) : 3 & 2 & 1
# (i=2, j=1, k=0) : 3 & 1 & 2

# Note:
# 1 <= A.length <= 1000
# 0 <= A[i] < 2^16

# Solution:
# The idea is to scan through all the "AND" operation patterns of the pairs using elements in A.
# If this is the first time this pattern is seen, scan through all the elements in A to see how many of them meet the criteria.
# If this pattern has been seen before, simply retrieve the corresponding count found previously.
# The final answer should be the sum from the searching results of all possible pairs.
# Time complexity: O(N^3)
# Space complexity: O(2^16)

class Solution:
    def countTriplets(self, A: 'List[int]') -> 'int':
        save, ans = [-1] * (2 ** 16), 0  # "save" is just big enough to save the counts for all pair patterns.
        for i in A:
            for j in A:
                cur = i & j
                if save[cur] == -1:  # If this "And" operation pattern is not seen before, scan through A.
                    save[cur] = 0  # Mark this pattern as seen.
                    for k in A:
                        if not cur & k:
                            save[cur] += 1
                ans += save[cur]
        return ans
