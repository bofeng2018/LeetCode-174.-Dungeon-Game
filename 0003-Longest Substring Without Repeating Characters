LeetCode 3: Longest Substring Without Repeating Characters
https://leetcode.com/problems/longest-substring-without-repeating-characters/

Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
             
Solution:
The key is to use hash lists to store letters in the current longest substring and retain the initial index of the current substring.
Time Complexity: O(N)
Space Complexity: O(N)

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        ans, save, i, n = 0, set(), 0, len(s)
        for S in s:
            while S in save:
                save.remove(s[i])
                i += 1
            save.add(S)
            ans = max(ans, len(save))
        return ans
